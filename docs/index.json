[
{
	"uri": "http://thewebdevblog.tech/html/intro/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://thewebdevblog.tech/intro/requirements/",
	"title": "Requirements",
	"tags": [],
	"description": "",
	"content": " All the content on this blog is 100% free, but for starters, you\u0026rsquo;re going to need a couple of things if you want to follow along and become a good programmer in general:\n1) Desktop Computer or Laptop with Linux/MacOS \u0026ldquo;Desktop Computer or Laptop\u0026rdquo; is pretty basic. A regular computer or old laptop should be more than fine to do web development.\nSadly you can\u0026rsquo;t, or at least you shouldn\u0026rsquo;t program in a phone or tablet. Not having a physical keyboard would be a major inconvenience as you will be using a lot of different characters.\nThe \u0026rdquo;\u0026hellip; with Linux/MacOS\u0026rdquo; part is little bit more trickier. Not including much support for Windows on the blog was a major struggle for me. It is said that the estimate percentage of people in the world using Windows is around 90%, so I felt that I was leaving a lot of people behind.\nAt the beginning of writing this blog I was writing all the tutorials with the three major operating systems in mind (using a Windows version that I have installed on my laptop), but after some time it became clear that doing anything programming related in Windows was just a major inconvenience.\nHere is a short excerpt from The Odin Project on this topic:\n Why can\u0026rsquo;t I use Windows? Ok, we get it.. you\u0026rsquo;re very comfortable with the system you\u0026rsquo;ve already got running, and chances are, you\u0026rsquo;re one of those \u0026ldquo;Computer People\u0026rdquo; that actually knows how the system works to some degree or another. You\u0026rsquo;re probably even telling yourself that if anyone can make this stuff work on Windows, it\u0026rsquo;s you.\nTechnically it is possible to get most of the needed elements running on Windows, but many of the required scripts and programs were originally written for Linux, or Mac systems with Windows as more of an afterthought. You will quickly run into trouble, with mismatching versions, out-of-date installers and other similar conflicts that you\u0026rsquo;ll need to resolve manually (and often repeatedly) and you\u0026rsquo;re likely to find things that used to work breaking unexpectedly, with rather cryptic error messages.\n After all of that being said, if you\u0026rsquo;re a Windows user, not all hope should be lost in you. If you want to follow the tutorials, I\u0026rsquo;ll still try to offer some support to make things work in Windows, but I have to say that I strongly recommend you to a least try a Linux system (I\u0026rsquo;d say Ubuntu is a great choice because is the most user-friendly for beginners).\nI have a laptop which has a dual boot of Ubuntu and Windows, and I always use Ubuntu to do almost everything (I still use Windows to play some games from time to time).\nIn my opinion, some of the areas in which Ubuntu surpasses Windows are:\n It\u0026rsquo;s Cheaper (because it\u0026rsquo;s free) It\u0026rsquo;s more Secure I like it\u0026rsquo;s Graphical Interface better The Command Line/Terminal The Development Environment  If you decide to install Ubuntu on your local machine, read this page by The Odin Project on Installations and go to the \u0026ldquo;Installing Linux\u0026rdquo; section, in there you\u0026rsquo;ll see four options, but the option I\u0026rsquo;d recommend to getting Linux installed is the \u0026ldquo;Option 2 - Dual Booting\u0026rdquo;.\nBecause The Odin Project is a curriculum that mostly focuses on Ruby/Ruby on Rails feel free to only make the Ubuntu installation and omit all of the others.\n2) Attitude The second requierement is attitude.\nIn my opinion, having a positive attitude is the critical factor that decides whether you will succeed or fail at becoming a software developer. My objective with this blog is that you discover how rewarding programming is. This is not going to be easy (nothing worthwhile in life is ever easy), so maintaining the right attitude will help you make this process a better journey.\nDon\u0026rsquo;t get frustrated if by any point you find yourself watching the computer in confusion and get the feeling that you know nothing, this is something you have to get accustomed as a programmer. \u0026ldquo;Shakespeare had to learn his ABC\u0026rsquo;s\u0026rdquo;, and so do you.\nHaving a good attitude as a programmer encompasses many areas. The more important ones that I\u0026rsquo;d recommend you to cultivate and develop are:\nPatience Written by Alex Allain in What does it take to be a programmer?\n At some point in your programming career, you will certainly make small mistakes that cost you hours of debugging only to realize that you were misspelling a variable name so the compiler thought it was another variable. These things happen even to good programmers\u0026ndash;and the better you get as you practice, the more you find that your bugs are interesting\u0026ndash;but still hard to find. If you\u0026rsquo;re not willing to patiently work through possible hypotheses and test each one in turn, you\u0026rsquo;re probably going to find programming to be frustrating as much as it is exhilarating.\nIf you\u0026rsquo;re looking to eventually have a programming job full-time, you\u0026rsquo;ll want to acquire excess patience because you\u0026rsquo;ll almost certainly be expected to spend a great deal of time working on documenting your code for other programmers and possibly even hunting bugs in someone else\u0026rsquo;s code.\nThe benefit of all of this is that you gain an eye for small details that can have ripple effects and you become much better at the process of asking yourself what could go wrong and how can you test it. Finally, you have a lot of tools at your disposal to help mitigate the problems; you can use the compiler to find syntax errors and debuggers to find runtime errors. Life is not bleak: not all of your time will be spent finding bugs!\n Resilience/Willingness to make mistakes Written by John Rampton in 15 Characteristics of a Good Programmer \n Programmers rarely get everything right on the first try. In fact, failure is almost a certainty. It’s important to find programming staff that sees errors and bugs as a challenge rather than a sign of defeat. Persistence is important, as well as the ability to start over if necessary, even after hours of work.\n Curiosity/Willingness to learn Written by John Sonmez in The 4 Most Important Skills for a Software Developer\n There is probably no more important skill in life than learning to learn.\nThis skill is especially important in software development, because no field I know of changes more rapidly than software development.\nYou can’t know everything about everything. You can’t even really invest the time it takes to be a master of one particular framework or technology—things are moving way too fast!\nInstead you need the ability to quickly acquire the knowledge you need for the task at hand.\nIf you truly want to have a skill that will propel you through your software development career, learn how to teach yourself.\nThe only way to develop this skill is to put it into use. Go out and learn a new programming language or technology, even if you think you’ll never use it. You’ll be surprised how quickly you may be able to pick it up because of the foundation you will already have in what you know.\nIf you can quickly adapt to the rapidly changing software development market and technologies and platforms associated with it, you will have skills that will always be in demand.\n Laziness Written by Larry Wall in Three Great Virtues of a Programmer\n [This is] the quality that makes you go to great effort to reduce overall energy expenditure. It makes you write labor-saving programs that other people will find useful and document what you wrote so you don\u0026rsquo;t have to answer so many questions about it.\n You can also watch a youtube video in which Larry talks about his \u0026ldquo;Three Virtues\u0026rdquo; called Hobbits Would Make Great Programmers.\nPassion Written by Chris Kite in 5 Personality Traits Every New Programmer Should Have\n Why do you want to learn to programming? To be cool? To get a better job? Or because you like to solve problems and build things?\nPassion can come from all of those, but if it is the latter, you are probably on the right track. Most programmers are engineers and have an inherent desire to build, disassemble, question, problem solve and conquer challenges that others cannot. They do this because they like to, not because a paycheck is involved.\nPassion is what will keep you up all night until you solve a problem. Passion will keep you working nights and weekends to learn or create when others are relaxing on the couch.\nWithout a burning desire to learn, your attempt to grasp programming concepts will be very challenging. Be honest with yourself and start your journey when you are truly ready.\n Finally, I\u0026rsquo;d recommend that you watch this TED Talk called \u0026ldquo;The power of believing that you can improve\u0026rdquo; (you can watch it at a speed of 1.25 or 1.5). In her talk, Carol Dweck tell us about the “growth mindset” which basically consists in the idea that we can grow our brain\u0026rsquo;s capacity to learn and to solve new problems just by learning this new mindset. I find this idea very empowering when I associate it with programming because I know I\u0026rsquo;ll always be learning new things and solving problems.\n"
},
{
	"uri": "http://thewebdevblog.tech/intro/",
	"title": "Intro",
	"tags": [],
	"description": "",
	"content": " Chapter 0 Intro \u0026ldquo;The expert in anything was once a beginner\u0026rdquo; - Helen Hayes\n"
},
{
	"uri": "http://thewebdevblog.tech/the_command_line/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " The first thing we are going to learn are the fundamentals of the command line. Specifically, we will cover the basics of the Unix command line, where Unix refers to the family of operating systems that includes Linux and Mac OS, but you\u0026rsquo;ll still be able to follow along if you use Windows.\nTo start, you don\u0026rsquo;t need any previous knowledge. I\u0026rsquo;ll assume that you don\u0026rsquo;t even know what the command line is or why do we use it. But if you already know the basics of the command line, that\u0026rsquo;s totally fine, just go to the quiz/exercises portion at the end of each page and solve it.\nWe\u0026rsquo;ll start with the What and the Why of the command line.\nWhat is the command line? The command line is a way of interacting with your computer. It\u0026rsquo;s a program into which you can type text commands to perform specific tasks. From the command line, you can navigate through your files and folders, just as you would with a file manager like Finder on Mac OS or Windows Explorer on Windows. The difference is that the command line is fully text-based.\nThe value of using the command line lies in its power. For many tasks, it\u0026rsquo;s more efficient and flexible than a graphical environment. You can write scripts to automate common actions, run programs, and even combine simple commands to handle difficult tasks.\nWhen we speak of the command line, we are really referring to the shell. The shell acts as the user interface to access your operating system\u0026rsquo;s services. This is the actual program that actually processes keyboard commands, passes them to the operating system and returns output.\nBecause we typically are running a graphical user interface in our computers, we need another program called terminal, this terminal acts as an interface for us to interact with the shell (Yep, we need an interface (the terminal) to interact with another interface (the shell), confusing, right?). In the terminal is were we\u0026rsquo;ll actually type the commands that order the computer what to do.\nWhy do we have to use the command line? The command line is one of the best tools at your disposal as a programmer. These days it has become a sort of Swiss Army knife with features locked behind simple commands.\nAt the terminal you can easily create files and folders, install new programs on your computer, use Git version control (which we will learn later), and most importantly, utilize it to run the software we are going to write. Having a basic understanding of how the command line works is crucial if you want to become a good software developer.\n"
},
{
	"uri": "http://thewebdevblog.tech/extras/questions/",
	"title": "FAQs",
	"tags": [],
	"description": "",
	"content": "  This page is going to act as a sort of Frequently Asked Questions. I expect the numbers of questions to grow as I get more feedback from you, the reader.\n1. How does the Blog work? Easy, read every page and follow along with the tutorials, answer the quizzes and do the projects.\nMy email direction is in the next page, so feel free to contact me if:\n You feel that something isn\u0026rsquo;t explained well enough or that I left something out. You\u0026rsquo;d like some feedback on a project that you\u0026rsquo;ve finished. You need some specific advice regarding your situation. You\u0026rsquo;d like to see a specific topic or technology covered here. You have some guidance or recommendations you\u0026rsquo;ll like to give me.  2. Why Full-Stack Web Development? Because being Full-Stack Developer means that you can do everything when it comes to making a Web Application. Dealing with server-side programming languages, databases, and making everything look nice on the front-end is just what you do as a Full-Stack Developer.\nWhether you end up focusing in a more specific area of expertise as a Front-End Developer, a Back-End Engineer or even maybe as a Technical Entrepreneur, I think it is really valuable to have a complete view of the terrain when you are working to create software with a team.\n3. How can I become a Web Developer and work as one? One of the biggest reasons I like the tech industry is the \u0026ldquo;pragmatism\u0026rdquo; that surrounds it. One of the consequences of this pragmatism is that your educational background doesn\u0026rsquo;t matter as much as in other professions.\nDue to the fact that the wealth of information we have online as programmers is more abundant than for many other skills or disciplines (Imagine training yourself to be a doctor online, or learning a PhD level of theoretical physics just by doing tutorials), it is relative easier to teach yourself programming if you just happen to be passionate about it.\nAccording to the 2016 survey from StackOverflow (Think of StackOverflow as the programmer version of Quora or Yahoo Answers), almost 70% of developers are self-taught, and less than the half of developers surveyed, have a technology-related undergraduate or graduate degree. So if you really like programming and think you\u0026rsquo;d like to work as one, I would say that you should just go for it, there haven\u0026rsquo;t been a better moment in history to try it.\nFor a more comprehensive analysis about this survey I recommend reading this article: Insights from Stack Overflow’s 2016 survey of 50,000 developers from Quincy Larson on Medium.\n 4. How can I collaborate with the blog? I\u0026rsquo;m very glad that you asked that ;)\nGo to the next page to find ways in which you can help make The WebDev Blog even better for everyone.\n"
},
{
	"uri": "http://thewebdevblog.tech/html/installations/",
	"title": "Installations",
	"tags": [],
	"description": "",
	"content": " All right, to start learning HTML, first we need to install a couple of programs into our computer; a Web Browser and a Text Editor.\nWeb Browser If you are reading this, I\u0026rsquo;m 99% sure that you are using a web browser right now. For this tutorial a modern version of Mozilla Firefox or Google Chrome should be more than fine to let us view our web pages.\nIf you already have one of those browsers installed on your computer, keep reading. Else, go and download one of them, I\u0026rsquo;ll wait for you here ;).\nText Editor To write our code, we\u0026rsquo;ll need a text editor. Basically, a text editor is a program that let us write, edit, and save text files. Although you may be thinking that you could use something like Microsoft Word to write code, the truth is that you shouldn\u0026rsquo;t (Mostly because office document editors rely on hidden elements that interfere with the rendering engines used by web browsers).\nIn this tutorial I\u0026rsquo;ll be using Atom which is a specialized text editor for programming created by the folks at Github. Atom comes with some features that will make our lives easier (like syntax highlighting) while writting our HTML.\nGo to the Atom link above, download the correct version for your operating system and install it. Then you\u0026rsquo;ll be ready for the next page.\n"
},
{
	"uri": "http://thewebdevblog.tech/the_command_line/",
	"title": "The Command Line",
	"tags": [],
	"description": "",
	"content": " Chapter 1 The Command Line \u0026ldquo;With great power comes great responsibility\u0026rdquo; - Uncle Ben\n"
},
{
	"uri": "http://thewebdevblog.tech/the_command_line/first_steps/",
	"title": "First Steps",
	"tags": [],
	"description": "",
	"content": " To make your experience learning the command line a little bit more fun, use your imagination and picture that you are playing a text adventure like this:\nThe first step to start playing the game, is well, to open the game:\n1) Entering the Command Line On Ubuntu  Open the Dash by clicking the Ubuntu icon in the upper-left. Type \u0026ldquo;terminal\u0026rdquo; in the search box. Select the Terminal application from the results that appear and click it.  On Mac OS  Hold down the command key and hit the spacebar. In the top right the blue \u0026ldquo;search bar\u0026rdquo; will pop up. Type \u0026ldquo;terminal\u0026rdquo; in the search bar. Click on the Terminal application that looks like a black box.  On Windows  To get access to a Unix command line, you\u0026rsquo;re going to need to install a program called \u0026ldquo;Cygwin\u0026rdquo; Read this tutorial by David Baumgold to install Cygwin on your computer (I\u0026rsquo;d recommend to also install Python too, because it could be handy on the future). Open Cygwin.  Now you that have your terminal open we can start playing :)\nIn this particular text adventure you are a wizard. You start in a dark room, and you don\u0026rsquo;t know where you are\u0026hellip;\n2) Your first command In your terminal write:\n~$ whoami  and then press enter.\nType only the characters after the dollar sign ($). If you type the $, you will get an error. Every command line starts with some symbol or symbols designed to “prompt” you to action. In my case is the \u0026ldquo;dollar sign\u0026rdquo; that you see above at the left of the command. This prompt is usually preceded by information that depends on the details of your system, but normally depends on what your username is, and where are you located on your terminal.\n The \u0026ldquo;whoami\u0026rdquo; command is a concatenation of the words \u0026ldquo;Who am I?\u0026rdquo;. What this command does is that it writes the username of the owner of the current login session. Picture that this is your character name in the game, in my case the output was:\nluisrodriguez  Try typing \u0026ldquo;WHOAMI\u0026rdquo; in all caps on your terminal and then press enter. You should get a response saying something like: \u0026ldquo;WHOAMI: command not found\u0026rdquo;\nThis is due to Case sensitivity; what this means, is that for the terminal, the command \u0026ldquo;whoami\u0026rdquo; is not the same as the word \u0026ldquo;WHOAMI\u0026rdquo;, and because it doesn\u0026rsquo;t understand what that word means, it just outputs an error.\n 3) The File System Almost every operating system has it\u0026rsquo;s files arranged in what is called a tree-structured, or hierarchical filesystem. A hierarchical structure means that information on the computer is organized in a (upside-down) tree-like pattern of directories which may contain files and other directories.\nMost graphical environments today include a file manager program to view and manipulate the contents of the file system. But because the terminal cannot provide graphical pictures of the file system structure, it must have a different way of representing things.\nDirectories? What are those? Basically a directory it\u0026rsquo;s a folder. Most of the times they are interchangeable terms. When you open your file browser to graphically find files, you are searching through folders. These folders are pretty much the same as these \u0026ldquo;directories\u0026rdquo; we\u0026rsquo;re going to work with. In this case, imagine directories as \u0026ldquo;rooms\u0026rdquo; that you can walk into.\nThink of the file system tree as a dungeon. At any given moment, you are located in a single directory (room) and from inside that directory, you can see its files (items), the pathway to its parent directory and the pathways to the subdirectories of the directory in which you are standing (think of the pathways as doors that go to other rooms).\nThe parent directory is a directory that contains the current directory. For example, if you currently find yourself in a path similar to this: \u0026rdquo;/Desktop/Cat_Pictures\u0026rdquo;, \u0026ldquo;Desktop\u0026rdquo; would correspond to the parent directory of \u0026ldquo;Cat_Pictures\u0026rdquo;.\n 4) Knowing where you are Every time you open the terminal you are going to be in your \u0026ldquo;home\u0026rdquo; directory. The directory/room you are standing in right now is called the working directory.\nIn your terminal type:\n~$ pwd  And press enter.\nThe \u0026ldquo;pwd\u0026rdquo; command means \u0026ldquo;Print Working Directory\u0026rdquo;. If you ever get lost in the computer, run this command and you\u0026rsquo;ll receive a trail of breadcrumbs all the way down from the top level of the computer to see where you are.\nIn my case the answer that I received from the computer was:\n/home/luisrodriguez  This is my \u0026ldquo;home\u0026rdquo; directory. Don\u0026rsquo;t freak out if you get a different response from your terminal. Because the location of the home directory varies from platform to platform you can get a different result.\n5) Observing Your Surroundings In your terminal type:\n~$ ls  The \u0026ldquo;ls\u0026rdquo; command means \u0026ldquo;List\u0026rdquo;. This command lists all of the non-hidden files that are in the current directory. In other words, it let\u0026rsquo;s you \u0026ldquo;view\u0026rdquo; what is inside of the directory in which you currently are.\nIn my case, the answer that I received from the computer when I typed the \u0026ldquo;ls\u0026rdquo; command was:\nDesktop Documents Downloads hello.py hello.txt index.html Music Pictures Projects Public The_WebDev_Blog  6) Creating Rooms/Directories As a wizard you need a lot of space to do your magical experiments, so I\u0026rsquo;ll show you how you can create extra rooms to play with.\nIn your terminal type:\n~$ mkdir First_Directory  The \u0026ldquo;mkdir\u0026rdquo; command means \u0026ldquo;Make Directory\u0026rdquo;. Right now we are creating a new directory called \u0026ldquo;First_Directory\u0026rdquo;. Note that, differently to all of the commands we have typed before, this command is composed by two parts; \u0026ldquo;mkdir\u0026rdquo; and \u0026ldquo;First_Directory\u0026rdquo;.\nThe \u0026ldquo;mkdir\u0026rdquo; portion is what we have come to know as a regular command. The \u0026ldquo;First_Directory\u0026rdquo; portion is what is called an argument. Command line arguments are values that tells the command in what they should act on or from. In this case, this command tells the computer to make a directory named \u0026ldquo;First Directory\u0026rdquo; on the directory in which we currently are.\nNow, if I type the \u0026ldquo;ls\u0026rdquo; command, the response that I receive is:\nDesktop Documents Downloads First_Directory hello.py hello.txt index.html Music Pictures Projects Public The_WebDev_Blog  You can see (between the Downloads folder and the hello.py file) that the \u0026ldquo;First_Directory\u0026rdquo; directory has been successfully created.\n7) Walking into new Rooms Altough we\u0026rsquo;ve have created a new directory, we are not inside of it, yet\u0026hellip;\nIn your terminal type:\n~$ cd First_Directory  The \u0026ldquo;cd\u0026rdquo; command stands for \u0026ldquo;Change Directory\u0026rdquo;, it lets you move between directories on your file system. Your command prompt should change to something like:\n~/First_Directory$  That means that we\u0026rsquo;ve succesfully changed the directories.\nIf you now type the \u0026ldquo;ls\u0026rdquo; command, you should get an blank response because the First_Directory itself is empty.\nIf you want to go back to the home directory, you can type this:\n~/First_Directory$ cd ..  The \u0026ldquo;cd ..\u0026rdquo; command means \u0026ldquo;go up by one directory\u0026rdquo;. Note that your command prompt changes again:\n~$  and that if you type the \u0026ldquo;ls\u0026rdquo; command, you get all of the same items that you received before:\n~$ ls Desktop Documents Downloads First_Directory hello.py hello.txt index.html Music Pictures Projects Public The_WebDev_Blog  Using the \u0026ldquo;cd\u0026rdquo; command along with the \u0026ldquo;ls\u0026rdquo; command is a very common pattern that you\u0026rsquo;ll use many times if you keep using the command line.\nQuiz Solve the quiz that correspond this page and then move into the exercises.\nGo to Quiz   Exercises  In your home directory, create a directory called \u0026ldquo;The_WebDev_Blog\u0026rdquo; using the mkdir command. Enter the \u0026ldquo;The_WebDev_Blog\u0026rdquo; directory using the cd command. Inside of the \u0026ldquo;The_WebDev_Blog\u0026rdquo; directory create a directory called \u0026ldquo;The_Command_Line\u0026rdquo;. Use the ls command to confirm that you have created the \u0026ldquo;The_Command_Line\u0026rdquo; directory. Enter inside the \u0026ldquo;The_Command_Line\u0026rdquo; directory. Use the pwd command to know where are you located. Return to your home directory using the cd .. command (twice)  When you\u0026rsquo;ve finished the exercises, go to the next page so you can learn some helpful shortcuts!\n"
},
{
	"uri": "http://thewebdevblog.tech/extras/collaborating/",
	"title": "Collaborating",
	"tags": [],
	"description": "",
	"content": " You can help the blog in many diferent ways, but for now I\u0026rsquo;ll just list three of them:\n Sharing: Spread the word and share this blog with your friends, family or with someone that you think could benefit from this resource.\n Feedback: Send me a mail at CodeKommissar@Gmail.com and tell me what you think of the site (what things you like like/dislike, what could be improved, what topics you\u0026rsquo;d like to see here, etc)\n Economic Support: If you\u0026rsquo;d like to express your support financially, feel free to use my personal PayPal.Me link for a one-time donation or alternatively check The WebDevBlog\u0026rsquo;s Patreon Page and make a donation from there.\nEvery dollar counts :).\n  "
},
{
	"uri": "http://thewebdevblog.tech/intro/beginner_advice/",
	"title": "Beginner&#39;s Advice",
	"tags": [],
	"description": "",
	"content": " Here are some pointers that I would like to have received when I started this journey.\n1) Download an app to track how many hours a day you are coding (And use it) I have a Windows Phone, so I downloaded an app called Pomodoro T-Soft, which I use everyday. If you have an iOS device Pomodoro Keeper is the app from the screenshots above, and for Android users I think that a good option is ClearFocus.\nI recommend using one of these for two reasons:\n1.- It lets you use the “Pomodoro Technique”. The Pomodoro Techinique has the benefits of improving your focus through the day and boosting your productivity.\nThis technique work like this:\n Choose a task to be accomplished. Set the Pomodoro to 25 minutes (the Pomodoro is the timer) Work on the task until the Pomodoro rings, then put a check on your sheet of paper Take a short break (5 minutes is OK) Every 4 Pomodoros take a longer break  If the benefits interest you, read the article that was linked above and try to implement the technique on a daily basis.\n2.- The app acts like a time diary, and at the end of the day you can see how many productive hours you had. It even stores this information and lets you know how many hours a week/hours a month you are logging in. This is important because you can use this data to find what causes you to be more productive and use that to your advantage. As Peter Drucker would say “What gets measured gets improved.”.\n2) Take your breaks seriously There are some times in programming in which I feel inspired and don’t want to stop until I finish my task at hand, then, when my Pomodoro Timer starts ringing saying is time for break, I just ignore it and continue coding.\nI noticed that this was a really bad strategy. Sooner than later in the day that I did this, I would have a feeling of burnout which caused me to not being able to keep productive.\nTo avoid this situation I followed my own advice and started to take my breaks seriously. Counterintuitively as it sounds, if you want to be able to code more, rest longer.\nSome good things to do during breaks are:\n Stand up from your chair and do some stretching Drink water Eat a healthy snack Exercise Check your phone Do some shores around the house (sweeping the floor, washing some dishes, etc.) Anything else that you want to do, that isn’t going to take more than 5 minutes.  3) Eat, Sleep, Drink, Repeat This one I’m going to separate in three different points:\n Eat well\nThe food you eat, is the fuel that maintain your brain in a good state to keep learning, so you should try to give it good fuel.\nWhat to do: You already know this, avoid fast foods, eat fruits and vegetables and try to eat in small to normal rations of food 4 to 5 times a day. This will keep your brain with constant fuel to learn lots and lots of new stuff.\n Sleep\nOne of the most important phases of learning happens when you are sleeping. During your sleep is when your brain creates new connections.\nWhat to do: Try to sleep your optimal number of hours (this can be different for every person, but is usually between 7 and 9 hours of sleep) and if you are going to take a nap, try to make it no longer than 20 minutes, so you don’t feel so groggy when you wake up.\n Drink lots of water\nWhen you’re dehydrated your brains starts to work at a sub-optimal rate and you may to start feeling weak or sleepy, so give it the water that it deserves.\nWhat to do: Start drinking more glasses of water, do to this:\n When you wake up, one of the first things you should do is drink a glass (or two) of water. Between your coding breaks. Before your meals.   4) Exercise The best way (in my opinion) to counter the back pains that come with the long hours of sitting is to exercise. You don’t even need to do much, I just recommend that you try two routines: The first one focus on strengthening your core muscles, which greatly decreases the lower-back pains, can be found in this Men\u0026rsquo;s Health article (Be sure to check out the video), and the second routine is for overall body strength; Nerd Fitness article.\nYou don’t need much equipment to do this routines, but if you want to invest some money in your physical health I would recommend to buy:\n A yoga math: to do stretching on the floor and some exercises A pair of dumbbells: to do a wider variety of exercises A jumping rope: to do cardio  5) Expand your learning mediums, but also limit them We all have been there; We fire up our browser, 10 tabs open, and every one of them has a unique type of coursera/edx course, interactive tutorial, online book, video tutorial, etc\u0026hellip; This, at least for me, caused some kind of analysis paralysis, leaving me with a feeling of \u0026ldquo;I just don’t know what to do\u0026rdquo;.\nIn this era of free information the amount of “learn to code” resources is huge, and I think that this can be a double edged sword.\nFor one side, this is one of the things that I absolute love about programming and about the Internet in general, the democratization of information is such, that you can learn hundreds of new things that the people ten or twenty years ago didn’t have access to, and apply those things that you’re learning to make your life so much better.\nOn the other side, I think this is kind of bad for the new learner, because when you are learning something, you need to focus and direct your atention to what you are doing right now without your mind going to 10 different places.\nTo keep your leaning fun and engaging, my advice to you is to keep your learning mediums to a maximum of 2 (maybe even 3), and to mix it a little bit. For example, read an online book (like Eloquent Javascript) and combine it with a interactive tutorial (the FreeCodeCamp\u0026rsquo;s curriculum comes to my mind).\n6) Work with goals in mind, but focus on the process One of the best ways of keeping yourself motivated to achieve something, is to put yourself some goals. Related to learning to program you could have one (or more) of the following goals:\n Bringing to life that application or game that you have been thinking of. Becoming a good software developer that can bring value to any organization or company. Finding a good job with a great team of co-workers. Making enough money to support you and your family. Something totally different.  Those are great goals, and I encourage you to try to pursue them, but if you are wasting a big part of your day, dreaming about the things that you would do or have if you were a great programmer, and forgetting to put the actual hours of study and practice, then isn\u0026rsquo;t very likely that you\u0026rsquo;ll achieve your goals. Learning to code, in my opinion, is one of the funnest and better ways in which you can use your free time in a productive manner. Remember to have fun, concentrate in the task at hand, and always share the knowledge.\n"
},
{
	"uri": "http://thewebdevblog.tech/html/resources/",
	"title": "Resources",
	"tags": [],
	"description": "",
	"content": "List of resources I used to make this section:\n MDN\u0026rsquo;s HTML Guide HTML Dog\u0026rsquo;s HTML Tutorial Mark Pilgrim\u0026rsquo;s Dive Into HTML5 Book Shay Howe\u0026rsquo;s Learn to Code HTML \u0026amp; CSS Book Colt Steele\u0026rsquo;s The Web Developer Bootcamp Course Jonas Schmedtmann\u0026rsquo;s Build Responsive Real World Websites with HTML5 and CSS3 Course  "
},
{
	"uri": "http://thewebdevblog.tech/html/",
	"title": "HTML",
	"tags": [],
	"description": "",
	"content": " Chapter 2 HTML \u0026ldquo;Structure is more important than content in the transmission of information\u0026rdquo; - Abbie Hoffman\n"
},
{
	"uri": "http://thewebdevblog.tech/the_command_line/shortcuts/",
	"title": "Shortcuts",
	"tags": [],
	"description": "",
	"content": " Now that you know some basic commands, we are going to learn some shortcuts.\nI hope that learning these shortcuts serve us two purposes; first, after you learn them, shortcuts are going to save you some precious time while using the command line, and second, if you still don\u0026rsquo;t feel 100% comfortable while using the terminal, learning these shortcuts can help you overcome some of that command line resistance.\n1) Changing between windows Alt + Tab: To try this shortcut, you should have only two programs open; your web browser with this page that you\u0026rsquo;re currently seeing and your terminal. Press this two keys and you should rapidly change between the two windows. The Alt + Tab shortcut let you switch between applications without using the mouse.\n2) History The history command: In your terminal type the command: \u0026ldquo;history\u0026rdquo; (without the double quotes) and press Enter. You should get a log of the commands you have recently typed.\nUp/Down Arrows: Use the up and down arrows on your keyboard to quickly move through your last recent commands. You can press these shortcuts multiple times to navigate through your history and re-use one of the commands that you previously used.\n3) Tab Completion Tab: This is one of everyone\u0026rsquo;s favorite shortcuts. While typing a file, directory, or command name, press Tab and your terminal will try to autocomplete what you were typing (if possible). If there is more than option to autocomplete, it will show you the various possible matches.\nFor example, let\u0026rsquo;s say you are in your home directory and you want to go to your Desktop; you could just type \u0026ldquo;cd De\u0026rdquo;, hit Tab to autocomplete the rest of the name of the directory and then press enter to change directories.\nWhat would happen if you only type \u0026ldquo;cd D\u0026rdquo; and then press Tab? In my case, nothing happened.\nBecause I have more than one directory starting with the letter \u0026ldquo;D\u0026rdquo;, I have to press Tab twice so that the terminal can show me the matches I\u0026rsquo;ve got. The output at my terminal was:\nDesktop/ Documents/ Downloads/  Showing me that I have three directories starting with \u0026ldquo;D\u0026rdquo;.\nIf I wanted to go the Downloads directory, I should type \u0026ldquo;cd Dow\u0026rdquo; + Tab, and then press enter to change directories while doing the minimum amount of keystrokes.\n4) Pasting Commands Ctrl + Shift + V: To paste text into the terminal, instead of using the classic Ctrl + V, you are going to need to add the Shift key for paste to function.\n5) Moving the Cursor Paste this into your terminal:\nthe quick brown fox jumps over the lazy dog  So you can test the following shortcuts.\nCtrl+Left and Ctrl+Right: Hitting Ctrl and the left or right arrow keys jumps between words in your command line.\nCtrl+A or Home: Moves your cursor to the beginning of the line. This is useful if you\u0026rsquo;ve typed a command but realize that there\u0026rsquo;s a typo in the first word. Instead of holding down the left arrow key, just hit Ctrl+A or Home and correct it.\nCtrl+E or End: Moves your cursor to the end of the line.\n6) Deleting Commands Ctrl+W: This deletes the word before the cursor only.\nCtrl+U: This clears the entire line so you can type in a completely new command.\nYou can use the text from the previous lesson to try these shortcuts ;).\n7) Back to the Home Directory If you are in any directory different to your home directory, try typing only the \u0026ldquo;cd\u0026rdquo; command, without anything after it. This should take you to home fast and easy.\n8) Clearing the Screen Ctrl+L: This \u0026ldquo;clears\u0026rdquo; the screen. And alternative is to run the “clear” command and press enter.\n9) Exiting the Terminal Ctrl+D: This closes the Terminal. And alternative is to type the \u0026ldquo;exit\u0026rdquo; command and press enter.\n10) Opening the Terminal On Ubuntu Ctrl + Alt + T: Press these three keys together and your terminal should appear automatically with your home directory as the path.\nRight click + Open in Terminal: Right click on your desktop or on a random folder and click the option that says \u0026ldquo;Open in Terminal\u0026rdquo;, this should open your terminal with the path of the item that you \u0026ldquo;right-clicked\u0026rdquo;.\nOn Mac OS I really don\u0026rsquo;t own a mac, but the closest I got for a shortcut to quickly open the terminal is:\nCMD + Space to open spotlight search, and then type in \u0026ldquo;terminal\u0026rdquo;.\nOn Windows Bring Cygwin to your desktop and use it from there.\nExercises If you haven\u0026rsquo;t been trying these shortcuts at your terminal, this is the moment to do so. Go through each shortcut and test it.\nWhen you have finished testing and playing with each one of the ten lessons of shortcuts, go to the next page.\n"
},
{
	"uri": "http://thewebdevblog.tech/intro/about/",
	"title": "About Me",
	"tags": [],
	"description": "",
	"content": "Before we begin this journey, let me introduce myself.\nMy name is Luis and I\u0026rsquo;m from Venezuela. Currently I\u0026rsquo;m 20 years old and I\u0026rsquo;m studying Electronics Engineering here in Venezuela.\nMy goal is to become a Full-Stack Developer and to work as one. If you have heard how things currently are in Venezuela, you may know that the situation here isn\u0026rsquo;t so great, so if I have the opportunity to go to a more stable country and make a living working as a developer while helping to support my family, I\u0026rsquo;d be more than happy to do so.\nI really want to be a Web Developer because it is something that I can see myself doing everyday, it is an activity that combines logical thinking with creative thinking, and I really like that. I just love the fact that I\u0026rsquo;m always creating new things and solving problems.\nMy hobbies include:\n Reading Books Listening to Music (I love alternative and indie music) Playing and Watching Soccer (Go Arsenal!) Working out (Mostly bodyweight exercises) Videogames (My favorites are Shadow of the Colossus, The Elder Scrolls: Morrowind, and Persona 4) Writing (As in this blog :)) and Programming  Feel free to send me a mail (my email address is at the Collaborating page) if you\u0026rsquo;d like to talk about some of the topics above or to discuss things/ask some questions related to the blog. I\u0026rsquo;ll try to reply your mail as soon as possible :)\nIf you have some questions before starting to learn, head up to the FAQs page in the Extras section\n "
},
{
	"uri": "http://thewebdevblog.tech/the_command_line/playing_with_scrolls/",
	"title": "Playing with scrolls",
	"tags": [],
	"description": "",
	"content": " Now that you know how to run basic commands at the terminal, along with a few shortcuts, we are going to start working with files. Because we are wizards, we are going to be playing with \u0026ldquo;scrolls\u0026rdquo; instead of just simple text files. Inside these scrolls, we are going to write the recipes of our potions.\nImagine this; you are in your Wizard\u0026rsquo;s Lair, fiddling around with alchemy ingredients (in this case, all you had left was Luna Moth Wings with Chaurus Eggs), and out of pure luck you made an Invisibility potion. Being a very useful type of potion, you want to record the ingredients that you used and their quantity in a scroll. How would you do that?\n1) Creating files from scratch First, we need to create the scroll. Open your terminal. When you have it open, go to the \u0026ldquo;The_Command_Line\u0026rdquo; directory that you\u0026rsquo;ve created in the Exercises portion of the First Steps page.\nWhen you\u0026rsquo;re inside that directory, enter this command:\n$ touch Invisibility_Potion.txt  The \u0026ldquo;touch\u0026rdquo; command simply creates an empty file. In this case we\u0026rsquo;re using the \u0026ldquo;touch\u0026rdquo; command to create an empty file named \u0026ldquo;Invisibility_Potion.txt\u0026rdquo;. If you now enter the \u0026ldquo;ls\u0026rdquo; command, you should get the name of the file that you\u0026rsquo;ve just created:\nInvisibility_Potion.txt  The original purpose of \u0026ldquo;touch\u0026rdquo; was to change the modification time of files or directories (and still does that), but nowadays we mostly use it to create empty files.\n2) Writing into files Now that we have an empty file, we need to learn how to write some text into it. For this, we are going to make use of the \u0026ldquo;echo\u0026rdquo; command. This command simply writes text into the terminal.\nIn your terminal, type:\n$ echo \u0026quot;Abracadabra!\u0026quot;  As a response, you should get:\nAbracadabra!  Just like the echo that you would hear in a cavern, the \u0026ldquo;echo\u0026rdquo; command repeats the \u0026ldquo;string\u0026rdquo; that you wrote between the quotation marks. A string is just a sequence of characters (like letters, numerals and punctuation marks). Although this command doesn\u0026rsquo;t seem that it does much, now you\u0026rsquo;ll see how it can be useful for our purposes.\nEnter this command:\n$ echo \u0026quot;Hello Alchemy!\u0026quot; \u0026gt; Invisibility_Potion.txt  LifeProTip: Remember to hit the \u0026ldquo;Tab Key\u0026ldquo; after writing \u0026ldquo;Inv\u0026rdquo;, so that you don\u0026rsquo;t have to type all of the characters in the \u0026ldquo;Invisibility_Potion.txt\u0026rdquo; string.\n The \u0026ldquo;\u0026gt;\u0026rdquo; is what is called the \u0026ldquo;redirect operator\u0026rdquo;. The redirect operator (\u0026gt;), redirects the output from the command on the left side into the file on the right hand side.\nBut how do we know that it actually worked? I\u0026rsquo;ll show you :)\n3) Viewing a file In your terminal, type:\n$ cat Invisibility_Potion.txt  As a response, you should get:\nHello Alchemy!  The \u0026ldquo;cat\u0026rdquo; command stands for \u0026ldquo;concatenation\u0026rdquo;. Concatenation is the action of joining strings together (i.e., when combining the words \u0026ldquo;Happy\u0026rdquo; and \u0026ldquo;Birthday\u0026rdquo; to wish someone a \u0026ldquo;Happy Birthday\u0026rdquo;, you are \u0026ldquo;concatenating\u0026rdquo; the two strings together). Altough you can indeed use the \u0026ldquo;cat\u0026rdquo; command to concatenate files, in this case we\u0026rsquo;re utilizing an extra feature of this command, that it\u0026rsquo;s to display the contents of a file.\n4) More Writing That is pretty neat! You wrote text into a file without using a text editor or a word processor, but what if you\u0026rsquo;d\u0026rsquo; like to write more than one line in that file?\nIn your terminal, type:\n$ echo \u0026quot;Ingredients to create an Invisibility Potion:\u0026quot; \u0026gt; Invisibility_Potion.txt  If you use the \u0026ldquo;cat\u0026rdquo; command on Invisibility_Potion.txt, as a response, you should receive:\nIngredients to create an Invisibility Potion:  What happended to the \u0026ldquo;Hello Alchemy!\u0026rdquo; that was in the beginning??\nAnswer: It was overwritten. Used with the \u0026ldquo;redirect operator\u0026rdquo; (\u0026gt;), the \u0026ldquo;echo\u0026rdquo; command overwrites the contents of a file.\nIf we want to add some extra lines of text into the file, we need to use the \u0026ldquo;append operator\u0026rdquo; (\u0026gt;\u0026gt;). In your terminal, enter:\n$ echo \u0026quot;* 2 Luna Moth Wings\u0026quot; \u0026gt;\u0026gt; Invisibility_Potion.txt  Notice that this time we used \u0026ldquo;\u0026gt;\u0026gt;\u0026rdquo; instead of just \u0026ldquo;\u0026gt;\u0026rdquo;. If you use the \u0026ldquo;cat\u0026rdquo; command again (remember to use the up arrow shortcut) on \u0026ldquo;Invisibility_Potion.txt\u0026rdquo;, you should receive:\nIngredients to create an Invisibility Potion: * 2 Luna Moth Wings  Let\u0026rsquo;s add the other ingredient:\n$ echo \u0026quot;* 3 Chaurus Eggs\u0026quot; \u0026gt;\u0026gt; Invisibility_Potion.txt  If we display the contents of \u0026ldquo;Invisibility_Potion.txt\u0026rdquo; again, this would be the result:\nIngredients to create an Invisibility Potion: * 2 Luna Moth Wings * 3 Chaurus Eggs  5) Copying files Now, let\u0026rsquo;s say, you want to make a copy of this Invisibility Potion recipe and send it to a friend. This is very achievable by using the \u0026ldquo;cp\u0026rdquo; command.\nAt your terminal type:\n$ cp Invisibility_Potion.txt Invisibility_Potion_Copy.txt  The \u0026ldquo;cp\u0026rdquo; command stands for \u0026ldquo;Copy\u0026rdquo;. If you enter the \u0026ldquo;ls\u0026rdquo; command now, it should display two files in your folder:\nInvisibility_Potion_Copy.txt Invisibility_Potion.txt  And if you use the \u0026ldquo;cat\u0026rdquo; command with \u0026ldquo;Invisibility_Potion_Copy.txt\u0026rdquo; as an argument, the text should correspond with the contents of \u0026ldquo;Invisibility_Potion.txt\u0026rdquo;:\nIngredients to create an Invisibility Potion: * 2 Luna Moth Wings * 3 Chaurus Eggs  You succesfully copied a file, but what else we can do with it?\n6) Renaming and Moving files Let\u0026rsquo;s say that you don\u0026rsquo;t like the name of the \u0026ldquo;Invisibility_Potion_Copy.txt\u0026rdquo; file because it has too many characters, how can we change it?\nIn your terminal type:\n$ mv Invisibility_Potion_Copy.txt IPC.txt  The \u0026ldquo;mv\u0026rdquo; command stands for \u0026ldquo;Move\u0026rdquo;. In this case, we are moving the \u0026ldquo;Invisibility_Potion_Copy.txt\u0026rdquo; file into the same location, but changing it\u0026rsquo;s name in the process. After using the \u0026ldquo;ls\u0026rdquo; command, you should see that your current files are:\nIPC.txt Invisibility_Potion.txt  Now, if you wanted to move the \u0026ldquo;ICP.txt\u0026rdquo; file into another location, let\u0026rsquo;s say, your Desktop, you could use the \u0026ldquo;mv\u0026rdquo; command in this way:\n$ mv ICP.txt ~/Desktop  The tilde \u0026ldquo;~\u0026ldquo;, is shorthand for your home directory, using it this way you can easily access your Desktop directory from anywhere on your computer. The alternative option would be to write:\n$ mv ICP.txt ../../Desktop/  That would mean to go \u0026ldquo;up\u0026rdquo;, then \u0026ldquo;up\u0026rdquo; again, and then \u0026ldquo;enter\u0026rdquo; inside the Desktop directory. But that would be more complicated, and could not work depending on where you created the \u0026ldquo;The_WebDev_Blog\u0026rdquo; and \u0026ldquo;The_Command_Line\u0026rdquo; directories.\nMinimize your windows, and check out your desktop, you should have the \u0026ldquo;ICP.txt\u0026rdquo; file somewhere in that mess, open it with a text editor and see it\u0026rsquo;s content.\nBack in your terminal, at the \u0026ldquo;The_Command_Line\u0026rdquo; directory, use the \u0026ldquo;ls\u0026rdquo; command. You should have only one file:\nInvisibility_Potion.txt  All seems fine, but creating scrolls, writing into them, copying their contents and etcetera, leaved you a little paranoid. You are a little afraid that your enemies find this Invisibility Potion Recipe and use it against you. So you decide that you should get rid of this recipe.\n7) Deleting files To delete files permanently, we use the \u0026ldquo;rm\u0026rdquo; command, like this:\n$ rm Invisibility_Potion.txt  The \u0026ldquo;rm\u0026rdquo; command stands for \u0026ldquo;Remove\u0026rdquo; and here we are using it to delete our \u0026ldquo;Invisibility_Potion.txt\u0026rdquo; file. If you use the \u0026ldquo;ls\u0026rdquo; command, your directory should be empty of files.\nWhat can you do if you want to recover your \u0026ldquo;Invisibility_Potion.txt\u0026rdquo; file? Pretty much nothing (feel lucky that you have a backup in your Desktop haha). The files deleted using the \u0026ldquo;rm\u0026rdquo; command are completely removed from your computer. They\u0026rsquo;re not even in the Trash, so be extra careful when using the \u0026ldquo;rm\u0026rdquo; command.\n Now that you have zero files, I want you to create a couple of dummy files. I\u0026rsquo;ll do it like this:\n$ touch dummy.txt $ touch dummy.py $ touch dummy.html  Notice that using \u0026ldquo;touch\u0026rdquo;, you can create files with any extension that you want.\n Make use of the \u0026ldquo;cd\u0026rdquo; command and go one directory above (\u0026ldquo;cd ..\u0026rdquo; if you don\u0026rsquo;t remember how). If you use \u0026ldquo;ls\u0026rdquo;, you should receive only one directory as a response:\nThe_Command_Line  Try to delete this directory with the \u0026ldquo;rm\u0026rdquo; command:\n$ rm The_Command_Line  It doesn\u0026rsquo;t work\u0026hellip; As a response, you should receive something like:\nrm: cannot remove 'The_Command_Line/': Is a directory  It failed because you can\u0026rsquo;t delete a directory with just the \u0026ldquo;rm\u0026rdquo; command. To remove a directory, you need to learn what \u0026ldquo;flags\u0026rdquo; are.\nIn your terminal, enter:\n$ rm -r The_Command_Line  If you use the \u0026ldquo;ls\u0026rdquo; command, you should see that you have succesfully deleted \u0026ldquo;The_Command_Line\u0026rdquo; directory.\nThe \u0026ldquo;-r\u0026rdquo; after the \u0026ldquo;rm\u0026rdquo; command is called a \u0026ldquo;flag\u0026rdquo; or \u0026ldquo;option\u0026rdquo;. Flags can change and even enhance commands, and are added using a single dash (-) after the command.\nIn this case the \u0026ldquo;-r\u0026rdquo; flag stands for recursive which means that it is going to remove all the contents of the directory recursively. Be very careful with this option, it is not unheard of people that deleted all of their system files with this combination.\nQuiz Solve the quiz that correspond this page and then move into the exercises.\nGo to Quiz   Exercises  Right now you should be on your \u0026ldquo;The_WebDev_Blog\u0026rdquo; directory, use the pwd command to confirm it. Create a new directory called \u0026ldquo;text_files\u0026rdquo; using the mkdir command and enter it with the cd command. Inside of the \u0026ldquo;text_files\u0026rdquo; directory create a file named \u0026ldquo;text.txt\u0026rdquo; with the touch command. Write any text into your \u0026ldquo;text.txt\u0026rdquo; file with the echo command and the redirect operator (\u0026gt;). Write another line of text into your \u0026ldquo;text.txt\u0026rdquo; file with the echo command and the append operator (\u0026gt;\u0026gt;). Read the contents of your \u0026ldquo;text.txt\u0026rdquo; file using the cat command. Rename your \u0026ldquo;text.txt\u0026rdquo; file to \u0026ldquo;t.txt\u0026rdquo; using the mv command. Make one copy of your newly named \u0026ldquo;t.txt\u0026rdquo; file using the cp command. (You can name your copy file anything that you want :)). Go up by one directory using the \u0026ldquo;cd ..\u0026rdquo; command, so you\u0026rsquo;ll be located on your \u0026ldquo;The_WebDev_Blog\u0026rdquo; directory and use the rm -r command to delete your \u0026ldquo;text_files\u0026rdquo; directory.  When you\u0026rsquo;ve finished all of the exercises; Congratulations!! You completed The Command Line section! I hope that you enjoyed it and that you learned a lot :D. In the next page there are most of the materials that I used to create this section.\n"
},
{
	"uri": "http://thewebdevblog.tech/the_command_line/resources/",
	"title": "Resources",
	"tags": [],
	"description": "",
	"content": "List of resources I used to make this section:\n Codecademy\u0026rsquo;s Learn the Command Line Viking Code School\u0026rsquo;s A Command Line Crash Course Getting to Know the Command Line by David Baumgold Survival guide for Unix newbies by Matt Might Command Line Crash Course by Zed Shaw Learn Enough Command Line to Be Dangerous by Michael Hartl Rithm School Terminal and UNIX The Linux Command Line by William Shotts  "
},
{
	"uri": "http://thewebdevblog.tech/extras/",
	"title": "Extras",
	"tags": [],
	"description": "",
	"content": " Chapter X Extras Think of this section as the \u0026ldquo;DLCs\u0026rdquo; of the blog\n"
},
{
	"uri": "http://thewebdevblog.tech/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Welcome!  Welcome to The WebDev Blog, I\u0026rsquo;m very glad you are here!\nThis website was made with the objective of teaching you (and in the process learn myself), what I believe are the fundamentals technologies to become a Full-Stack Web Developer.\nI\u0026rsquo;m going to write learning materials in the form of tutorials, quizzes and projects (both as code-alongs and homeworks) for anyone who wants to learn along with me.\nFor starters, some of the topics that we\u0026rsquo;re going to cover are:\n Tools of the Trade: The command line, text editors, the browser, etc\u0026hellip; HTML: To Structure our web pages. CSS: To Style our web pages. JavaScript: To add Interactivity to our web pages.  Have in mind that I\u0026rsquo;m not an expert and that I don\u0026rsquo;t even work as web developer (yet). I\u0026rsquo;m learning just as you are, so I don\u0026rsquo;t want to pretend that I know it all. I just want to share the things that I\u0026rsquo;ve learned in the past or that I\u0026rsquo;m currently learning.\nIf you feel attracted to the idea of following along the path of someone who wants to become a great programmer and help others along the way, keep reading through the pages ;)\nThe simplest way to navigate the blog is to use the Next and Previous arrows ( ) or your Left and Right keyboard arrows on each page.\n "
},
{
	"uri": "http://thewebdevblog.tech/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://thewebdevblog.tech/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]